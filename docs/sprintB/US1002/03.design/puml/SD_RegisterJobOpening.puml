@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

actor "CustomManager" as CustomManager
participant ":CreateJobOpeningUI" as CreateJobOpeningUI
participant "theController: CreateJobOpeningController" as CreateJobOpeningController
participant "customerRepository: CustomerRepository" as CustomerRepository
participant "jobOpeningRepository: JobOpeningRepository" as JobOpeningRepository
participant "JobOpening" as JobOpening

activate CustomManager
CustomManager -> CreateJobOpeningUI : doShow()
activate CreateJobOpeningUI

CreateJobOpeningUI -> CreateJobOpeningController : createJobOpening(customerCode, jobTitle, contractType...);
activate CreateJobOpeningController

loop until valid customer code
    CreateJobOpeningUI -> CreateJobOpeningController : read customer code
    CreateJobOpeningController -> CustomerRepository : verifyIfCustomerExists(customerCode)
    activate CustomerRepository
    CustomerRepository --> CreateJobOpeningController : return boolean
    deactivate CustomerRepository
end

CreateJobOpeningUI -> CreateJobOpeningController : gather job opening details
CreateJobOpeningController -> CreateJobOpeningController : validate inputs

CreateJobOpeningController -> JobOpeningRepository : nextJobNumber(customerCode)
activate JobOpeningRepository
JobOpeningRepository --> CreateJobOpeningController : job number
deactivate JobOpeningRepository

CreateJobOpeningController -> JobOpening : new JobOpening(parameters)
activate JobOpening
JobOpening --> CreateJobOpeningController : job opening instance
deactivate JobOpening

CreateJobOpeningController -> JobOpeningRepository : save(JobOpening)
activate JobOpeningRepository
JobOpeningRepository --> CreateJobOpeningController : confirmation
deactivate JobOpeningRepository

CreateJobOpeningController --> CreateJobOpeningUI : display result
deactivate CreateJobOpeningController

CreateJobOpeningUI --> User : display result
deactivate CreateJobOpeningUI
@enduml
