@startuml

class CustomerManager {
}

class VerifyInterviewsUI {
    - listJobOpeningsController: ListJobOpeningsController
    - theController: VerifyInterviewsController
    + doShow(): boolean
    + headline(): String
}

class ListJobOpeningsController {
    + allJobReferences(): List<JobReference>
}

class VerifyInterviewsController {
    - jobOpeningRepository: JobOpeningRepository
    - applicationRepository: ApplicationRepository
    + getInterviewFilePath(jobReference: JobReference): String
    + getApplications(jobReference: JobReference): List<jobApplication>
    + getCandidatesFilePath(applications: List<jobApplication>): List<String>
    + getInterviewsFromFilePath(filePath: String): List<InterviewAnswers>
    + checkInterviews(correctInterviews: List<InterviewAnswers>, candidateInterviews: List<InterviewAnswers>): boolean
    + saveEvaluationToJobApplication(application: jobApplication, passedInterviews: boolean): void
}

class JobOpeningRepository {
    + getInterviewFilePath(jobReference: JobReference): String
    + findAllJobReferences(): List<JobReference>
}

class ApplicationRepository {
    + findByJobReference(jobReference: JobReference): List<jobApplication>
    + save(application: jobApplication): void
}

class jobApplication {
    - interviewAnswersPath: InterviewAnswersPath
    + getInterviewAnswersPath(): InterviewAnswersPath
    + setInterviews(interviews: Interviews): void
    + reject(): void
}

class CostumerInterviewsLexer {
    + CostumerInterviewsLexer(charStream: CharStream)
}

class CostumerInterviewsParser {
    + CostumerInterviewsParser(commonTokenStream: CommonTokenStream)
    + start(): StartContext
}

class InterviewsVisitor {
    + visit(startContext: StartContext): void
    + getInterviews(): List<InterviewAnswers>
}

class InterviewsChecker {
    + checkInterviews(correctInterviews: List<InterviewAnswers>, candidateInterviews: List<InterviewAnswers>): boolean
}

class InterviewAnswers {
    - id: String
    - content: String
    - answer: String
    + InterviewAnswers(id: String, content: String, answer: String)
    + getId(): String
    + getContent(): String
    + getAnswer(): String
}

class JobReference {
}

class InterviewAnswersPath {
    + getFilePath(): String
}

class Interviews {
    + static valueOf(evaluation: InterviewsEvaluation, justification: InterviewsJustification): Interviews
}

class InterviewsEvaluation {
    <<enumeration>>
    ACCEPTED
    REJECTED
}

class InterviewsJustification {
    + static valueOf(justification: String): InterviewsJustification
}

CustomerManager --> VerifyInterviewsUI
VerifyInterviewsUI --> ListJobOpeningsController
VerifyInterviewsUI --> VerifyInterviewsController
ListJobOpeningsController --> JobOpeningRepository
VerifyInterviewsController --> JobOpeningRepository
VerifyInterviewsController --> ApplicationRepository
VerifyInterviewsController --> CostumerInterviewsLexer
VerifyInterviewsController --> CostumerInterviewsParser
VerifyInterviewsController --> InterviewsVisitor
VerifyInterviewsController --> InterviewsChecker
VerifyInterviewsController --> jobApplication
JobOpeningRepository --> JobReference
ApplicationRepository --> jobApplication
jobApplication --> InterviewAnswersPath
jobApplication --> Interviews
Interviews --> InterviewsEvaluation
Interviews --> InterviewsJustification
InterviewsVisitor --> InterviewAnswers

@enduml
