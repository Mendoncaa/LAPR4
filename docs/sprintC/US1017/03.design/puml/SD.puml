@startuml

actor CustomerManager
participant "UploadInterviewUI" as UI
participant "UploadInterviewController" as Controller
participant "ApplicationService" as AppService
participant "jobApplication" as Application

CustomerManager -> UI : Asks to import candidate interview
activate UI

UI -> Controller : getApplications()
activate Controller

Controller -> AppService : findAll()
activate AppService

AppService --> Controller : Iterable<jobApplication>
deactivate AppService

Controller --> UI : Iterable<jobApplication>
deactivate Controller

UI -> CustomerManager : Asks to select an application
CustomerManager -> UI : Select an application

UI -> CustomerManager : Request file
CustomerManager -> UI : Upload text file with Interview

UI -> Controller : uploadTextFile(jobApplication, String)
activate Controller

Controller -> Controller: passGrammar(String)


    alt if file is valid
        Controller -> AppService : uploadInterviewResponses(jobApplication, String)
        activate AppService
        AppService -> Application : updateResponses(String)
        activate Application

        Application -> AppService : "Update Successful"
        deactivate Application

        AppService --> Controller : "Update Successful"
        deactivate AppService

        Controller --> UI : "Update Successful"
        deactivate Controller

        UI -> CustomerManager : Return success message
    

deactivate UI

@enduml
