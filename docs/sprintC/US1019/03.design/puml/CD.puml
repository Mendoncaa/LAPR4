@startuml ClassDiagram

package UI {
    class ListOrderedApplicationsUI {
        - controller: ListOrderedApplicationsController
        + doShow(): boolean
        + headline(): String
        + askForJobReference(): String
    }
    class ApplicationByGradePrinter {
        + visit(visitee: jobApplication): void
        + printHeader(): void
        + printRows(applications: List<jobApplication>): void
        + printFooter(): void
    }
}

package Controller {
    class ListOrderedApplicationsController {
        - jobOpeningRepository: JobOpeningRepository
        - applicationRepository: ApplicationRepository
        - orderApplicationsService: OrderApplicationsService
        + validateJobReference(jobReference: String): List<jobApplication>
    }
}

package Service {
    class OrderApplicationsService {
        - recruitmentProcess: RecruitmentProcess
        + orderedListOfApplications(applications: List<jobApplication>): List<jobApplication>
        - validateCurrentPhase(): boolean
    }
}

package Repository {
    class JobOpeningRepository {
        + findByJobReference(jobReference: JobReference): Optional<JobOpening>
    }
    class ApplicationRepository {
        + findByJobReference(jobReference: JobReference): List<jobApplication>
    }
}

package Model {

    package CandidateAgg {
        class Candidate {
            + candidateEmail: EmailAddress
            + candidateName: Name
            + candidatePhone: PhoneNumber
            + state: CandidateState
        }

        class Name {
            + customerName: String
        }
        class EmailAddress {
            + email: String
        }
    }

    package JobOpeningAgg {
        class JobReference {
            + customerCode: String
            + jobNumber: int
        }

        class JobOpening {
            + jobReference: JobReference
            + recruitmentProcess: RecruitmentProcess
            + getJobReference(): JobReference
            + getRecruitmentProcess(): RecruitmentProcess
        }

        class RecruitmentProcess {
            + id: int
            + status: RecruitmentProcessStatus
            + phases: List<Phase>
            + currentPhase(): Phase
            + nextPhase(): void
            + previousPhase(): void
        }

        class Phase {
            + name: PhaseName
            + startDate: StartDate
            + endDate: EndDate
            + status: PhaseStatus
        }

        enum PhaseName {
            APPLICATION,
            SCREENING,
            INTERVIEWS,
            ANALYSIS,
            RESULT
        }

        class StartDate {
            + date: Date
        }

        class EndDate {
            + date: Date
        }

        enum PhaseStatus {
            Open,
            Closed
        }

        enum RecruitmentProcessStatus {
            Uninitiated,
            InProcess,
            Finished
        }
    }

    package ApplicationAgg {
        class jobApplication {
            + interview: Interview
            + candidate: Candidate
            + jobOpening: JobOpening
            + getInterview(): Interview
            + getCandidate(): Candidate
            + getJobOpening(): JobOpening
        }

        class Interview {
            + dateTime: InterviewDateTime
            + grade: InterviewGrade
        }

        class InterviewDateTime {
            + date: Date
        }

        class InterviewGrade {
            + grade: int
        }
    }

    Candidate --> Name
    Candidate --> EmailAddress
    RecruitmentProcess --> Phase: "has"
    Phase --> PhaseName
    Phase --> StartDate
    Phase --> EndDate
    Phase --> PhaseStatus
    RecruitmentProcess --> RecruitmentProcessStatus
    Application --> Interview
    Interview --> InterviewDateTime
    Interview --> InterviewGrade
    JobOpening --> JobReference
    JobOpening --> RecruitmentProcess
    jobApplication --> Interview
    jobApplication --> Candidate
    jobApplication --> JobOpening
}

ListOrderedApplicationsUI --> ListOrderedApplicationsController
ListOrderedApplicationsController --> OrderApplicationsService
OrderApplicationsService ..> RecruitmentProcess
ListOrderedApplicationsUI ..> Candidate
ListOrderedApplicationsController ..> JobReference
ListOrderedApplicationsController --> JobOpeningRepository
ListOrderedApplicationsController --> ApplicationRepository
OrderApplicationsService ..> jobApplication
@enduml
