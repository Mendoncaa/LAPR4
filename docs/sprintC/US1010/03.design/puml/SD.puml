@startuml SequenceDiagram
actor CustomerManager
boundary PhasesUI
control PhasesController
entity PhaseValidatorService
entity RecruitmentProcess
participant PersistenceContext
database JobOpeningRepository
database ApplicationRepository
database RankRepository

-> PhasesUI: doShow()
activate PhasesUI
PhasesUI -> PhasesController : create()
activate PhasesController
PhasesController -> PersistenceContext : repositories().jobOpening()
activate PersistenceContext
PersistenceContext -> JobOpeningRepository : create()
PersistenceContext --> PhasesController : jobOpeningRepository : JobOpeningRepository
deactivate PersistenceContext
PhasesController --> PhasesUI : controller : PhasesController
deactivate PhasesController
PhasesUI --> CustomerManager: Asks for JobReference
CustomerManager --> PhasesUI: Insert JobReference
PhasesUI -> PhasesController: validateJobReference(jobReference : JobReference)
activate PhasesController
PhasesController -> JobOpeningRepository: findJobOpeningByJobReference(JobReference)
activate JobOpeningRepository
JobOpeningRepository --> PhasesController: jobOpening : JobOpening
deactivate JobOpeningRepository
PhasesController -> PhaseValidatorService : create(recruitmentProcess : RecruitmentProcess)
activate PhaseValidatorService
PhaseValidatorService -> PersistenceContext : repositories().application()
activate PersistenceContext
PersistenceContext -> ApplicationRepository : create()
PersistenceContext --> PhaseValidatorService : applicationRepository : ApplicationRepository
deactivate PersistenceContext
PhaseValidatorService -> PersistenceContext : repositories().rank()
activate PersistenceContext
PersistenceContext -> RankRepository : create()
PersistenceContext --> PhaseValidatorService : rankRepository : RankRepository
deactivate PersistenceContext
PhaseValidatorService --> PhasesController: phaseValidatorService : PhaseValidatorService
deactivate PhaseValidatorService
PhasesController -> PhaseValidatorService: validatePhaseTransition()
activate PhaseValidatorService
alt PhaseName == "Analysis"
PhaseValidatorService -> RankRepository : findByJobReference(jobReference : JobReference)
activate RankRepository
RankRepository --> PhaseValidatorService: rank : Rank
deactivate RankRepository
else PhaseName != "Analysis"
PhaseValidatorService -> ApplicationRepository : countApplicationsByJobReference(jobReference : JobReference)
activate ApplicationRepository
ApplicationRepository --> PhaseValidatorService: numberOfApplications : int
deactivate ApplicationRepository
    alt PhaseName == "Screening"
    PhaseValidatorService -> ApplicationRepository : countScreeningByJobReference(jobReference : JobReference)
    activate ApplicationRepository
    ApplicationRepository --> PhaseValidatorService: numberOfApplicationsScreening : int
    deactivate ApplicationRepository
    else PhaseName == "Interviews"
    PhaseValidatorService -> ApplicationRepository : countInterviewsByJobReference(jobReference : JobReference)
    activate ApplicationRepository
    ApplicationRepository --> PhaseValidatorService: numberOfApplicationsInterviews : int
    deactivate ApplicationRepository
    else PhaseName == "Result"
    PhaseValidatorService -> ApplicationRepository : countResultByJobReference(jobReference : JobReference)
    activate ApplicationRepository
    ApplicationRepository --> PhaseValidatorService: numberOfApplicationsResults : int
    deactivate ApplicationRepository

    end
end
PhaseValidatorService -> PhaseValidatorService : validatePhaseTransitionForward()
PhaseValidatorService -> PhaseValidatorService : validatePhaseTransitionBackward()
PhaseValidatorService --> PhasesController: options : Iterable<String>
deactivate PhaseValidatorService
PhasesController --> PhasesUI: options : Iterable<String>
deactivate PhasesController
PhasesUI --> CustomerManager: Show options
CustomerManager --> PhasesUI: Choose option
PhasesUI -> PhasesController: ProcessTransition(chosenOption : String)
activate PhasesController
alt chosenOption == "Forward"
PhasesController -> RecruitmentProcess: nextPhase()
else chosenOption == "Backward"
PhasesController -> RecruitmentProcess: previousPhase()
end
PhasesController -> JobOpeningRepository : save(recruitmentProcess : RecruitmentProcess)
PhasesController --> PhasesUI: Display confirmation or error
deactivate PhasesController
PhasesUI --> CustomerManager: Show confirmation or error
deactivate PhasesUI
@enduml
