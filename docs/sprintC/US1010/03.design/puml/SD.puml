@startuml SequenceDiagram
actor CustomerManager
boundary PhasesUI
control PhasesController
entity PhaseValidatorService
entity AuthorizationService
entity RecruitmentProcess
participant PersistenceContext
database JobOpeningRepository
database ApplicationRepository

-> PhasesUI: doShow()
activate PhasesUI
PhasesUI -> PhasesController : create
activate PhasesController
PhasesController -> PersistenceContext : repositories().jobOpenings()
activate PersistenceContext
PersistenceContext -> JobOpeningRepository : create
PersistenceContext --> PhasesController : jobOpeningRepository : JobOpeningRepository
deactivate PersistenceContext
PhasesController --> PhasesUI : controller : PhasesController
deactivate PhasesController
PhasesUI --> CustomerManager: Asks for JobReference
CustomerManager --> PhasesUI: Insert JobReference
PhasesUI -> PhasesController: validateJobReference(jobReference : JobReference)
activate PhasesController
PhasesController -> JobOpeningRepository: findJobOpeningByJobReference(JobReference)
activate JobOpeningRepository
JobOpeningRepository --> PhasesController: jobOpening : JobOpening
deactivate JobOpeningRepository
PhasesController -> PhaseValidatorService : create(recruitmentProcess : RecruitmentProcess)
activate PhaseValidatorService
PhaseValidatorService -> PersistenceContext : repositories().application()
activate PersistenceContext
PersistenceContext -> ApplicationRepository : create
PersistenceContext --> PhaseValidatorService : applicationRepository : ApplicationRepository
deactivate PersistenceContext
PhaseValidatorService --> PhasesController: phaseValidatorService : PhaseValidatorService
deactivate PhaseValidatorService
PhasesController -> PhaseValidatorService: validatePhaseTransition(jobOpeningChosen : JobOpening)
activate PhaseValidatorService
alt PhaseName == "Analysis"
PhaseValidatorService -> PhaseValidatorService: validateRankOptions(rank : Rank)
activate PhaseValidatorService
deactivate PhaseValidatorService
else PhaseName != "Analysis"
PhaseValidatorService -> ApplicationRepository : findByJobReference(jobReference : JobReference)
activate ApplicationRepository
ApplicationRepository --> PhaseValidatorService: List<JobApplication> : jobApplications
deactivate ApplicationRepository
PhaseValidatorService -> PhaseValidatorService : getSpecificPhaseCount(currentPhase : PhaseName, jobApplications : List<jobApplication>)
activate PhaseValidatorService
    alt PhaseName == "Screening"
    PhaseValidatorService -> PhaseValidatorService : countScreening(jobApplications : List<jobApplication>)
    activate PhaseValidatorService
    deactivate PhaseValidatorService
    else PhaseName == "Interviews"
    PhaseValidatorService -> PhaseValidatorService : countInterviews(jobApplications : List<jobApplication>)
    activate PhaseValidatorService
    deactivate PhaseValidatorService
    else PhaseName == "Result"
    PhaseValidatorService -> PhaseValidatorService : countResults(jobApplications : List<jobApplication>)
    activate PhaseValidatorService
    deactivate PhaseValidatorService
    end
    deactivate PhaseValidatorService
end
PhaseValidatorService -> PhaseValidatorService : validatePhaseTransitionForward(currentPhase : PhaseName, numberOfApplications : int, specificPhaseCount : int)
activate PhaseValidatorService
deactivate PhaseValidatorService
PhaseValidatorService -> PhaseValidatorService : validatePhaseTransitionBackward(currentPhase : PhaseName, specificPhaseCount : int)
activate PhaseValidatorService
deactivate PhaseValidatorService
PhaseValidatorService --> PhasesController: options : Iterable<String>
deactivate PhaseValidatorService
PhasesController --> PhasesUI: options : Iterable<String>
deactivate PhasesController
PhasesUI --> CustomerManager: Show options
CustomerManager --> PhasesUI: Choose option
PhasesUI -> PhasesController: ProcessTransition(chosenOption : String)
activate PhasesController
alt chosenOption == "Forward"
PhasesController -> RecruitmentProcess: nextPhase()
else chosenOption == "Backward"
PhasesController -> RecruitmentProcess: previousPhase()
end
PhasesController -> AuthorizationService : ensureAuthenticatedUserHasAnyOf();
PhasesController -> JobOpeningRepository : save(jobOpeningChosen : JobOpening)
PhasesController --> PhasesUI: Display confirmation or error
deactivate PhasesController
PhasesUI --> CustomerManager: Show confirmation or error
deactivate PhasesUI
@enduml
