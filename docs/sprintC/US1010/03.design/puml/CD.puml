@startuml ClassDiagram

package Controller {
    class PhasesController {
            - jobOpeningRepository: JobOpeningRepository
            - phaseValidatorService: PhaseValidatorService
            - authz: AuthorizationService
            - jobOpeningChosen: JobOpening
            + validateJobReference(jobReference: String): Iterable<String>
            + processTransition(chosenOption: String): boolean
    }
}

package Service {
    class PhaseValidatorService {
        - recruitmentProcess: RecruitmentProcess
        - applicationRepository: ApplicationRepository
        + validatePhaseTransition(jobOpening: JobOpening)): Iterable<String>
        - getSpecificPhaseCount(currentPhase: PhaseName, jobApplications: List<jobApplication>): int
        - countScreening(jobApplications: List<jobApplication>): int
        - countInterviews(jobApplications: List<jobApplication>): int
        - countResults(jobApplications: List<jobApplication>): int
        - validateRankOptions(rank : Rank): List<String>
        + validatePhaseTransitionForward(currentPhase: PhaseName, numberOfApplications: int, specificPhaseCount: int): boolean
        + validatePhaseTransitionBackward(currentPhase: PhaseName, specificPhaseCount: int): boolean
    }
    class AuthorizationService {
            + ensureAuthenticatedUserHasAnyOf(roles: Role): void
    }
}

package Repository {
    class ApplicationRepository {
        + findByJobReference(jobReference: JobReference): List<jobApplication>
    }

    class JobOpeningRepository {
            + findByJobReference(jobReference: JobReference): Optional<JobOpening>
            + save(jobOpening: JobOpening): JobOpening
    }

}

package Model {

    package JobOpeningAgg {

        class JobReference {
            + customerCode: String
            + jobNumber: int
        }

        class RecruitmentProcess {
            + id: Long
            + status: RecruitmentProcessStatus
            + phases: List<Phase>
            + addPhase(phase: Phase): void
            + removePhase(phase: Phase): void
            + nextPhase(): boolean
            + previousPhase(): boolean
            + currentPhase(): Phase
            - openPhaseByName(phaseName: PhaseName): boolean
        }

        class Phase {
            + name: PhaseName
            + startDate: StartDate
            + endDate: EndDate
            + status: PhaseStatus
            + open(): void
            + close(): void
        }

        enum PhaseName {
            APPLICATION,
            SCREENING,
            INTERVIEWS,
            ANALYSIS,
            RESULT
        }

        class StartDate {
            + date: Date
        }

        class EndDate {
            + date: Date
        }

        enum PhaseStatus {
            OPEN,
            CLOSED
        }

        enum RecruitmentProcessStatus {
            UNINITIATED,
            IN_PROCESS,
            FINISHED
        }
    }
    package JobApplicationAgg {
        class JobApplication {
            +id: Long
            +requirementsEvaluation: RequirementsEvaluation
            +notificationStatus: NotificationStatus
            +interview: Interview
        }

        enum RequirementsEvaluation {
            PENDING
            ACCEPTED
            REJECTED
        }

        enum NotificationStatus {
            UNSEND
            SEND
        }

        class Interview {
            +interviewGrade: InterviewGrade
        }

        class InterviewGrade {
            +grade: int
        }

        JobApplication --> RequirementsEvaluation
        JobApplication --> Interview
        JobApplication --> NotificationStatus
        Interview --> InterviewGrade
    }
    package RankAgg {
        class Rank {
            +id: Long
            +rankStatus: RankStatus
        }

        enum RankStatus {
                UNSTARTED,
                STARTED,
                FINISHED
        }

        Rank --> RankStatus
    }
}

package UI {
    class PhasesUI {
        - controller: PhasesController
        + doShow(): boolean
        + headline(): String
        - askForJobReference(): String
        - showOptions(options: Iterable<String>): void
        - processTransition(chosenOption: String): void
        - showConfirmationOrError(message: String): void
    }
}

PhasesController --> PhaseValidatorService
PhasesController --> AuthorizationService
PhasesController --> JobOpeningRepository
PhasesController ..> JobReference
PhaseValidatorService --> ApplicationRepository
PhaseValidatorService ..> RecruitmentProcess
PhaseValidatorService ..> Rank
PhaseValidatorService ..> JobApplication
RecruitmentProcess --> Phase : "has"
Phase --> PhaseName
Phase --> StartDate
Phase --> EndDate
Phase --> PhaseStatus
RecruitmentProcess --> RecruitmentProcessStatus

PhasesUI --> PhasesController

@enduml