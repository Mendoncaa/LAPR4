@startuml ClassDiagram

package Controller {
    class PhasesController {
        - phaseValidatorService: PhaseValidatorService
        - jobOpeningRepository: JobOpeningRepository
        - authz: AuthorizationService
        + validateJobReference(jobReference: JobReference): Iterable<String>
        + processTransition(chosenOption: String, jobReference: String): boolean
    }
}

package Service {
    class PhaseValidatorService {
        - applicationRepository: ApplicationRepository
        - rankRepository: RankRepository
        - recruitmentProcess: RecruitmentProcess
        + validatePhaseTransition(jobReference: String): Iterable<String>
        - getSpecificPhaseCount(currentPhase: PhaseName, jobReference: JobReference): int
        - validatePhaseTransitionForward(currentPhase: PhaseName, numberOfApplications: int, specificPhaseCount: int): boolean
        - validatePhaseTransitionBackward(currentPhase: PhaseName, numberOfApplications: int, specificPhaseCount: int): boolean
    }
}

package Repository {
    class JobOpeningRepository {
        + findByJobReference(jobReference: JobReference): Optional<JobOpening>
        + save(jobOpening: JobOpening): void
    }

    class ApplicationRepository {
        + countApplicationsByJobReference(jobReference: JobReference): int
        + countScreeningByJobReference(jobReference: JobReference): int
        + countInterviewsByJobReference(jobReference: JobReference): int
        + countResultsByJobReference(jobReference: JobReference): int
    }

    class RankRepository {
        + findByJobReference(jobReference: JobReference): Rank
    }
}

package Model {

    package JobOpeningAgg {

        class JobReference {
            + customerCode: String
            + jobNumber: int
        }

        class RecruitmentProcess {
            + id: Long
            + status: RecruitmentProcessStatus
            + phases: List<Phase>
            + addPhase(phase: Phase): void
            + removePhase(phase: Phase): void
            ~ nextPhase(): boolean
            ~ previousPhase(): boolean
            + currentPhase(): Phase
            - openPhaseByName(phaseName: PhaseName): boolean
        }

        class Phase {
            + name: PhaseName
            + startDate: StartDate
            + endDate: EndDate
            + status: PhaseStatus
            + open(): void
            + close(): void
        }

        enum PhaseName {
            APPLICATION,
            SCREENING,
            INTERVIEWS,
            ANALYSIS,
            RESULT
        }

        class StartDate {
            + date: Date
        }

        class EndDate {
            + date: Date
        }

        enum PhaseStatus {
            OPEN,
            CLOSED
        }

        enum RecruitmentProcessStatus {
            UNINITIATED,
            IN_PROCESS,
            FINISHED
        }
    }
}

package UI {
    class PhasesUI {
        - controller: PhasesController
        + doShow(): boolean
        + headline(): String
        - askForJobReference(): String
        - showOptions(options: Iterable<String>, jobReference: String): void
        - processTransition(chosenOption: String, jobReference: String): void
        - showConfirmationOrError(message: String): void
    }
}

PhasesController --> PhaseValidatorService
PhasesController --> JobOpeningRepository
PhasesController ..> JobReference
PhaseValidatorService --> ApplicationRepository
PhaseValidatorService ..> RecruitmentProcess
PhaseValidatorService --> RankRepository
RecruitmentProcess --> Phase : "has"
Phase --> PhaseName
Phase --> StartDate
Phase --> EndDate
Phase --> PhaseStatus
RecruitmentProcess --> RecruitmentProcessStatus

PhasesUI --> PhasesController

@enduml
