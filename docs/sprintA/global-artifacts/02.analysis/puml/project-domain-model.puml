@startuml
'https://plantuml.com/class-diagram

hide field
hide methods

title Domain Driven Design
skinparam linetype ortho

package InterviewAgg #bababa {

    class Interview<<Root>><<Entity>>
    class InterviewQuestions<<Value Object>>
    class InterviewAnswers<<Value Object>>
    

    Interview-->"1"InterviewQuestions
    Interview-->"1"InterviewAnswers
    



    class TrueFalseQuestion<<Value Object>>
    class ShortTextAnswerQuestion<<Value Object>>
    class SingleAnswerChoiceQuestion<<Value Object>>
    class MultipleAnswerChoiceQuestion<<Value Object>>
    class IntegerNumberQuestion<<Value Object>>
    class DecimalNumberQuestion<<Value Object>>
    class DateQuestion<<Value Object>>
    class TimeQuestion<<Value Object>>
    class NumericScaleQuestion<<Value Object>>

    "InterviewQuestions""1" --> "*"TrueFalseQuestion
    "InterviewQuestions""1" --> "*"ShortTextAnswerQuestion
    "InterviewQuestions""1" --> "*"SingleAnswerChoiceQuestion
    "InterviewQuestions""1" --> "*"MultipleAnswerChoiceQuestion
    "InterviewQuestions""1" --> "*"IntegerNumberQuestion
    "InterviewQuestions""1" --> "*"DecimalNumberQuestion
    "InterviewQuestions""1" --> "*"DateQuestion
    "InterviewQuestions""1" --> "*"TimeQuestion
    "InterviewQuestions""1" --> "*"NumericScaleQuestion

}

package InterviewModelAgg #baabab {

    class InterviewModel<<Root>><<Entity>>
    class InterviewName<<Value Object>><<Id>>
    class InterviewJarFile<<Value Object>>
    class InterviewDescription<<Value Object>>


    InterviewModel-->"1"InterviewName
    InterviewModel-->"1"InterviewJarFile
    InterviewModel-->"1"InterviewDescription
    

    Interview --> InterviewModel : Makes
    

}



note right of InterviewModelAgg
  Responsibilities:
  - Generate a template text file with the questions to be asked in the interview and the possible answers for each question
  - Evaluate if a text file with the questions and answers for a particular candidate interview is syntactically correct
  - Evaluate a text file with the questions and answers for a particular candidate interview and provide a numeric grade for that interview
end note

package ClientAgg #bababa {

    class Client<<Entity>><<Root>>
    class ClientID<<Value Object>>
    class Name<<Value Object>>
    class Address<<Value Object>>
    class ClientRepresentative<<Entity>>
    class RepresentativeID<<Value Object>>
    class Email<<Value Object>>
    class PhoneNumber<<Value Object>>
    class FullName<<Value Object>>
    class ShortName<<Value Object>>
    class Password<<Value Object>>

    Client "1" -- "1" ClientID
    Client "1" -- "1" Name
    Client "1" -- "1" Address
    Client "1" -- "1" ClientRepresentative
    ClientRepresentative "1" -- "1" RepresentativeID
    ClientRepresentative "1" -- "1" Email
    ClientRepresentative "1" -- "1" PhoneNumber
    ClientRepresentative "1" -- "1" FullName
    ClientRepresentative "1" -- "1" ShortName
    ClientRepresentative "1" -- "1" Password

    

}

package JobOpeningAgg #baabab {

    class JobOpening<<Root>><<Entity>>
    class JobReference<<Value Object>>
    class Phase<<Value Object>>
    class Duration<<Value Object>>
    class NrVacancies<<Value Object>>
    class Title<<Value Object>>
    class ContractType<<Value Object>>
    class Description<<Value Object>>
    class Address<<Value Object>>
    class Mode<<Value Object>>
    class Requirements<<Value Object>>

    JobOpening "1" -- "1" JobReference
    JobOpening "1" -- "1" Phase
    JobOpening "1" -- "1" Duration
    JobOpening "1" -- "1" NrVacancies
    JobOpening "1" -- "1" Title
    JobOpening "1" -- "1" ContractType
    JobOpening "1" -- "1" Description
    JobOpening "1" -- "1" Address
    JobOpening "1" -- "1" Mode
    JobOpening "1" -- "1" Requirements

    ClientID --> JobOpening : Creates

    
}

package RequirementsSpecificationAgg #bababa {

    class RequirementsSpecification<<Root>><<Service>>
    class JarFile<<Value Object>>
    class SpecName<<Value Object>>

    RequirementsSpecification "1" -- "1" JarFile
    RequirementsSpecification "1" -- "1" SpecName

    JobReference --> RequirementsSpecification : Has
}

package CandidateAgg #baabab {

    class Candidate<<Root>><<Entity>>
    class CandidateID<<Value Object>>
    class CandidateEmail<<Value Object>>
    class CandidateName<<Value Object>>
    class CandidatePhoneNumber<<Value Object>>

    Candidate "1" -- "1" CandidateID
    Candidate "1" -- "1" CandidateEmail
    Candidate "1" -- "1" CandidateName
    Candidate "1" -- "1" CandidatePhoneNumber

}

package ApplicationAgg #baabab {

    class Application<<Root>><<Entity>>
    class ApplicationID<<Value Object>>
    class ApplicationData<<Value Object>>
    class ApplicationEmailContent<<Value Object>>
    class ApplicationState<<Entity>>
    class ApplicationStateID <<Value Object>>
    class ApplicationRanking<<Entity>>
    class RequirementsResult<<Value Object>>
    class InterviewResults<<Value Object>>
    class ApplicationStateDate<<Value Object>>

    Application "1" -- "1" ApplicationID
    Application "1" -- "1" ApplicationState
    Application "1" -- "1" ApplicationData
    Application "1" -- "1" ApplicationEmailContent
    Application "1" -- "1" ApplicationRanking
    ApplicationState "1" -- "1" ApplicationStateDate
    ApplicationState "1" -- "1" ApplicationStateID

    CandidateID --> Application : Makes
    ApplicationID --> JobReference : Refers

    ApplicationID --> RequirementsSpecification : is evaluated by
    Interview-->ApplicationID : Refers
    ApplicationRanking --> InterviewResults : Has
    ApplicationRanking --> RequirementsResult : Has

    InterviewModel --> InterviewResults : Refers
    RequirementsSpecification --> RequirementsResult : Refers

    

}




@enduml